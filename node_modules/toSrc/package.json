{
  "name": "toSrc",
  "description": "Turns every JavaScript object or primitive into valid source code.",
  "version": "0.1.3",
  "homepage": "http://jhnns.github.com/toSrc",
  "repository": {
    "type": "git",
    "url": "git://github.com/jhnns/toSrc.git"
  },
  "author": {
    "name": "Johannes Ewald",
    "email": "mail@johannesewald.de",
    "url": "http://johannesewald.de"
  },
  "main": "./lib/toSrc.js",
  "keywords": [
    "toSource",
    "toSrc",
    "source",
    "object",
    "serialization",
    "stringify",
    "JSON",
    "eval",
    "vm",
    "obj2src"
  ],
  "bugs": {
    "url": "http://github.com/jhnns/toSrc/issues",
    "email": "mail@johannesewald.de"
  },
  "dependencies": {},
  "devDependencies": {},
  "engines": {
    "node": "< 0.9.x"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "readme": "**toSrc** [![Build Status](https://secure.travis-ci.org/jhnns/toSrc.png?branch=master)](http://travis-ci.org/jhnns/toSrc)\r\n========\r\n\r\n**Turns every JavaScript object or primitive into valid source\r\ncode that can be evaled again.**\r\n\r\nYou can use it to serialize classes, modules or other programming objects\r\nand reuse them in an other environment such as a browser. JSON.stringify doesnt work with programming objects (that contain functions, dates, etc.) because they're no legal JSONs.\r\n\r\nWorks with node.js (tested) or in the browser (not tested)\r\n\r\n<br />\r\n\r\nInstallation\r\n------------\r\n`npm install toSrc`\r\n\r\n<br />\r\n\r\nExamples\r\n-----\r\n\r\n```javascript\r\n\r\n    var toSrc = require(\"toSrc\");\r\n    \r\n    // Primitives\r\n    ///////////////////////////////////////\r\n    toSrc(1); // = '1'\r\n    toSrc(true); // = 'true'\r\n    toSrc(\"1\"); // = '\"1\"'\r\n    toSrc('1'); // = '\"1\"' toSrc always uses double-quotes    \r\n\r\n    // Constants\r\n    ///////////////////////////////////////\r\n    toSrc(Math.PI); // = 'Math.PI'\r\n    toSrc(NaN); // = 'NaN'\r\n\r\n    // RegExp\r\n    ///////////////////////////////////////\r\n    toSrc(/myRegEx/gi); // = '/myRegEx/gi'\r\n    toSrc(new RegExp(\"myRegEx\")); // = '/myRegEx/'\r\n\r\n    // Date\r\n    ///////////////////////////////////////\r\n    toSrc(new Date()); // = 'new Date(<the time of creation in ms>)'\r\n\r\n    // Functions\r\n    ///////////////////////////////////////\r\n    function testFunc() {\r\n        var test = \"hello\";\r\n    }\r\n    toSrc(testFunc); // = 'function testFunc() {\\n    var test = \"hello\";\\n}'\r\n    toSrc(String); // = 'String', native functions don't expose the source code\r\n\r\n    // Arrays\r\n    ///////////////////////////////////////\r\n    toSrc([1, 2, \"3\"]); // = '[1, 2, \"3\"]'\r\n    toSrc([1, 2, [\"a\", \"b\", \"c\"]]); // = '[1, 2, undefined]' because the depth\r\n                                    // is 1 by default\r\n    toSrc([1, 2, [\"a\", \"b\", \"c\"]], 2); // = '[1, 2, [\"a\", \"b\", \"c\"]]'\r\n\r\n    // Objects\r\n    ///////////////////////////////////////\r\n    toSrc({\r\n        regEx: /regex/gi,\r\n        anotherObj: {\r\n            test: \"test\"\r\n        }\r\n    });\r\n    // = '{\"regEx\": /regex/gi, \"anotherObj\": undefined}'\r\n    // anotherObj is undefined because the depth is 1 by default.\r\n    toSrc({\r\n        \"regEx\": /regex/gi,\r\n        \"anotherObj\": {\r\n            \"test\": \"test\"\r\n        }\r\n    }, 2);\r\n    // = '{\"regEx\": /regex/gi, \"anotherObj\": {\"test\": \"test\"}}'\r\n\r\n```\r\n\r\nFor more examples check out `test/test.js`\r\n\r\n<br />\r\n\r\nAPI\r\n-----\r\n**toSrc(***obj*, *depth***)**\r\n\r\n- *{ * } obj*:<br />\r\nThe object to stringify. Can also be a primitive like `1` or `true`.\r\n- *{Number=1} depth*:<br />\r\nThe depth to go. All nested structures like objects or arrays deeper than this will be undefined. Defaults to 1, meaning that every object or array within `obj` will be undefined by default.\r\n\r\n<br />\r\n\r\nUsage\r\n-----\r\n\r\n### In node.js\r\n\r\n```javascript\r\nvar toSrc = require(\"toSrc\");\r\n\r\ntoSrc(obj, depth);\r\n```\r\n\r\n### In the browser\r\n\r\nJust call `toSrc(obj, depth);`\r\n\r\n<br />\r\n\r\nNotes\r\n-----\r\n* Circular references will be undefined. No error is thrown, but a warning is logged.\r\n* All math constants are restored to their source representation, e.g.: `toSrc(Math.PI); // = 'Math.PI' instead of 3.14...`\r\n* All dates are restored to their original time of creation, e.g.: `toSrc(new Date()) // = 'new Date(<time of creation in ms>)'`\r\n* Dynamic regular expressions created via `new RegExp()` will **not** be dynamic anymore. `toSrc(new RegExp(someString))` will return `'/<value of someString>/'` instead of `'new RegExp(someString)'\r\n\r\nFeel free to modify the code to meet your needs.\r\n\r\n\r\n<br />\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Johannes Ewald &lt;mail@johannesewald.de&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "_id": "toSrc@0.1.3",
  "_from": "toSrc@0.x"
}
